package com.nk.test2;

import java.util.Stack;

/**
 * 输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否可能为该栈的弹出顺序。 假设压入栈的所有数字均不相等。
 * 例如序列1,2,3,4,5是某栈的压入顺序，序列4,5,3,2,1是该压栈序列对应的一个弹出序列， 但4,3,5,1,2就不可能是该压栈序列的弹出序列。
 * （注意：这两个序列的长度是相等的）
 * 
 * @author zheng
 *
 * 
 */
public class IsPopOrderTest {

	public static void main(String[] args) {

		int[] pushA = { 1, 2, 3, 4, 5 };
		int[] popA = { 4, 5, 3, 2, 1 };
		boolean isPopOrder = IsPopOrder(pushA, popA);
		System.out.println(isPopOrder);
	}

	public static boolean IsPopOrder(int[] pushA, int[] popA) {

		Stack<Integer> stack = new Stack<Integer>();
		if (pushA.length == 0) {
			return false;
		}
		int num = 0;
		for (int i = 0; i < pushA.length; i++) {
            //和栈顶相等就出栈，每次都要入栈
			stack.push(pushA[i]);
			while (!stack.isEmpty() && stack.peek() == popA[num]) {
				stack.pop();
				num++;
			}
		}

		if (stack.isEmpty()) {   //栈为空时就证明是
			return true;
		}
		return false;

	}
}
