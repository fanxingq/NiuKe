package com.nk.test3;

import java.util.ArrayList;

/**
 * 小明很喜欢数学,有一天他在做数学作业时,要求计算出9~16的和,他马上就写出了正确答案是100。
 * 但是他并不满足于此,他在想究竟有多少种连续的正数序列的和为100(至少包括两个数)。
 * 没多久,他就得到另一组连续正数和为100的序列:18,19,20,21,22。
 * 现在把问题交给你,你能不能也很快的找出所有和为S的连续正数序列? Good Luck!
 * 
 * 输出所有和为S的连续正数序列。序列内按照从小至大的顺序，序列间按照开始数字从小到大的顺序.
 * 
 * @author zheng
 *
 * 双指针技术，就是相当于有一个窗口，窗口的左右两边就是两个指针，我们根据窗口内值之和来确定窗口的位置和宽度。
 * 
 */
public class FindContinuousSequenceTest {

	public static void main(String[] args) {

		ArrayList<ArrayList<Integer>> list = FindContinuousSequence(100);
		System.out.println(list.toString());
	}

	public static ArrayList<ArrayList<Integer> > FindContinuousSequence(int sum) {
	 
		ArrayList<ArrayList<Integer>> res = new ArrayList<ArrayList<Integer>>();
		int plow = 1,phigh = 2;
		
		while (plow<phigh) {
			int cur = (plow + phigh)*(phigh-plow+1)/2;   //等差数列求和公式 Sn = (a0+an)*n/2;
			if (cur == sum) {   //当和相等时，就将所有满足的值加进list中
				ArrayList<Integer> list = new ArrayList<Integer>();
				for (int i = plow; i <= phigh; i++) {
					list.add(i);
				}
				res.add(list);
				plow++;
			}else if (cur<sum) {   //当求得的和小于sum时，就将phigh指针右移一位
				phigh++;
			}else {   //当求得的和大于sum时，就将plow指针右移一位
				plow++;
			}
			
		}

		return res;
		
    }
	
	//[[9, 10, 11, 12, 13, 14, 15, 16], [18, 19, 20, 21, 22]]
	
	
	
}
